{"version":3,"sources":["Components/DefaultConfiguration.js","Components/GenotypeSelect.js","Components/ReferenceForm.js","Components/CompareForm.js","Components/HeatConfig.js","Components/HistConfig.js","Components/HaploConfig.js","Components/TrackOptionsSelect.js","Components/BaseOptionsSelect.js","Components/OptionsForm.js","Components/HelpTopics/About.js","Components/HelpTopics/ReferenceGenotype.js","Components/HelpTopics/ComparisonGenotype.js","Components/HelpTopics/GeneralOptions.js","Components/HelpTopics/DisplayNone.js","Components/HelpTopics/DisplayHaplotype.js","Components/HelpTopics/DisplayHistogram.js","Components/HelpTopics/DisplayHeat.js","Components/HelpModal.js","Components/DownloadModal.js","Components/DisplayButton.js","Components/Key.js","App.js","index.js"],"names":["rulerDisplayDefault","rulerDisplayOptions","imageTitleDefault","Date","toDateString","popover","position","zIndex","cover","top","right","bottom","left","GenotypeSelector","state","selectedDataset","selectedGenotype","displayColorPicker","color","datasetChange","setState","props","setDataset","append","dataset","genotype","appendDataset","idx","gtChange","colorClick","colorClose","formatDatasetValue","colorSet","hex","this","selected","gtOpt","genotypes","className","onClick","style","background","onChange","defaultValue","label","classNamePrefix","value","isClearable","isDisabled","filterOption","createFilter","ignoreAccents","options","datasets","components","Option","CustomOption","length","undefined","removeOption","React","Component","innerProps","otherProps","isFocused","otherInnerProps","onMouseMove","onMouseOver","newProps","children","ReferenceForm","CompareForm","count","rm","filter","opt","key","addOption","concat","prevProps","prevState","snapshot","heatConfig","compare","side","minValue","maxValue","filters","feature","glyph","display","draw_as","invert_value","min","max","width","offset","bin_size","bin_min","bin_max","by_class","class_filter","map","class_offset","class_heat","draw_label","max_distance","border","value_base","generate_bins","count_classes","transparent","transparent_percent","histConfig","enable_pileup","border_width","haploConfig","class_space","displayFormats","comparisonFormats","heatFormat","heatColorFormat","TrackOptions","displayAs","heat","heatColor","viewConfig","setConfiguration","format","forEach","gt","optionsUpdate","toLowerCase","displayChange","compareChange","filterChange","heatColorChange","heatChange","maxChange","parseInt","target","hapMax","minChange","filterFormats","isMulti","name","type","id","placeholder","onInput","e","BaseOptions","rulerDisplay","binSize","rulerInterval","title","rulerChange","values","titleChange","binChange","intervalChange","OptionsForm","group","general","tick_interval","display_ruler","setOptions","About","height","src","frameBorder","allow","allowFullScreen","ReferenceGenotype","hideInfo","maxHeight","ComparisonGenotype","GeneralOptions","DisplayNone","DisplayHaplotype","DisplayHistogram","DisplayHeat","HelpModal","closeAction","DataModal","quality","gffOptions","onClickImage","a","document","getElementById","classList","toggle","resolveSVGBlob","resolvePngBlob","url","saveImage","Promise","resolve","setTimeout","paper","window","cvit","model","encodeURIComponent","project","exportSVG","asString","view","element","toBlob","blob","URL","createObjectURL","link","createElement","download","href","body","appendChild","click","onClickData","gff","data","gffOpts","loadIndicator","hasOwnProperty","dataGroup","features","line","seqName","source","start","end","score","strand","frame","attributes","attribute","win","open","write","evt","onSelect","onChecked","checked","chromosome","diff","same","total","DisplayButton","priorRequest","request","interval","response","refMax","onSubmit","setKey","headers","requestString","classes","query","i","Error","_viewConfig","hide","visibility","hideOptions","_viewData","console","log","appendData","method","then","_viewLayout","chrOrder","_setChrOrder","vd","Object","keys","chr","maxScore","setView","catch","error","_combineObjects","_redraw","setDirty","_inform","visible","keyItem","push","fontWeight","fontWeigth","App","referenceDataset","currentKey","showModal","auth","process","REACT_APP_USE_AUTH","user","pwd","authHeader","Headers","loadDatasets","header","fetch","json","slice","val","result","JSON","parse","stringify","handleCloseModal","handleOpenModal","userChange","passwordChange","checkAuthState","authString","btoa","status","alert","logout","gts","isOpen","onRequestClose","shouldCloseOnOverlayClick","overflow","has","ReactDOM","render"],"mappings":"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","file":"static/js/main.84bf8389.chunk.js","sourcesContent":["/**\r\n * Default values for UI components.\r\n */\r\n\r\n\r\n/**\r\n * Side of drawing to display the ruler\r\n */\r\nexport function rulerDisplayDefault(rulerDisplayOptions) { return rulerDisplayOptions[0]}; //0-LHS,1-RHS,2-Both,3-None\r\n\r\n\r\n/**\r\n * Distance in default units between major tick ines in ruler\r\n */\r\nexport const rulerIntervalDefault = 5000000;\r\n\r\n/**\r\n * Size of display \"bin\" for counts\r\n */\r\nexport const binSizeDefault = 500000;\r\n\r\n/**\r\n * Default title\r\n */\r\nexport const titleDefault  = \"\";\r\n\r\n/**\r\n * Default feature color\r\n */\r\nexport const colorDefault = '#19741A';\r\n\r\n/**\r\n * Default title for exported image\r\n */\r\nexport const imageTitleDefault = \"GCViT\" + new Date().toDateString();\r\n","/**\r\n * Selector dropdown for a new genotype option\r\n */\r\n\r\nimport React  from 'react';\r\nimport Select, {createFilter, components} from 'react-select';\r\nimport {SketchPicker} from 'react-color';\r\nimport {colorDefault} from './DefaultConfiguration';\r\n\r\n// placement of color select popup\r\nconst popover = {\r\n\tposition: 'absolute',\r\n\tzIndex: '2'\r\n};\r\n\r\nconst cover = {\r\n\tposition: 'fixed',\r\n\ttop: '0px',\r\n\tright: '0px',\r\n\tbottom: '0px',\r\n\tleft: '0px',\r\n};\r\n\r\nexport default class GenotypeSelector extends React.Component {\r\n\r\n\tstate = {\r\n\t\tselectedDataset: null,\r\n\t\tselectedGenotype: null,\r\n\t\tdisplayColorPicker: false,\r\n\t\tcolor: colorDefault\r\n\t};\r\n\r\n\t/**\r\n\t * Set up genotype value from form options\r\n\t */\r\n\tformatDatasetValue(){\r\n\t\treturn {\r\n\t\t\tdataset: this.state.selectedDataset || null,\r\n\t\t\tgenotype: this.state.selectedGenotype || null,\r\n\t\t\tcolor: this.state.color || null\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t * Change dataset source if enabled\r\n\t */\r\n\tdatasetChange = (selectedDataset) => {\r\n\t\tthis.setState({ selectedDataset, selectedGenotype: null });\r\n\t\tthis.props.setDataset(selectedDataset);\r\n\t\tlet append = { dataset: selectedDataset, genotype:null, color: this.state.color||null};\r\n\t\tthis.props.appendDataset(this.props.idx, append)\r\n\t};\r\n\r\n\t/**\r\n\t * Change genotype if enabled\r\n\t */\r\n\tgtChange = (selectedGenotype) => {\r\n\t\tthis.setState({ selectedGenotype });\r\n\t\tlet append = { dataset: this.state.selectedDataset, genotype: selectedGenotype, color: this.state.color||null};\r\n\t\tthis.props.appendDataset(this.props.idx, append);\r\n\t};\r\n\r\n\t/**\r\n\t * Display color picker\r\n\t */\r\n\tcolorClick = () => {\r\n\t\tthis.setState({displayColorPicker : true})\r\n\t};\r\n\r\n\t/**\r\n\t * hide color picker\r\n\t */\r\n\tcolorClose = () => {\r\n\t\tthis.setState({displayColorPicker : false});\r\n\t\tthis.props.appendDataset(this.props.idx, this.formatDatasetValue())\r\n\t};\r\n\r\n\t/**\r\n\t * set chosen color\r\n\t */\r\n\tcolorSet = (color) => {\r\n\t\tthis.setState({color: color.hex})\r\n\t};\r\n\r\n\r\n\t/**\r\n\t * Set dataset if component is for a variant\r\n\t */\r\n\tcomponentDidMount() {\r\n\t\tif(this.props.selected){\r\n\t\t\tthis.setState({'selectedDataset':this.props.selected})\r\n\t\t}\r\n\t};\r\n\r\n\trender() {\r\n\t\tconst { selectedDataset, selectedGenotype } = this.state;\r\n\t\tconst { idx } = this.props;\r\n\t\tconst gtOpt = this.props.genotypes !== null ? this.props.genotypes : [];\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t<div className={'pure-g genotype-select'}>\r\n\t\t\t\t<div className={'pure-u-1-12 l-box '}>\r\n\t\t\t\t\t<span> Color </span><br/>\r\n\t\t\t\t\t<div className={'fake-button git-option'} onClick={this.colorClick} style={{background:this.state.color, zIndex:1 }} />\r\n\t\t\t\t\t{ this.state.displayColorPicker\r\n\t\t\t\t\t\t?<div>\r\n\t\t\t\t\t\t\t<div style={ cover } onClick={this.colorClose} />\r\n\t\t\t\t\t\t\t<div style={ popover }>\r\n\t\t\t\t\t\t\t\t<SketchPicker color={ this.state.color } onChange={ this.colorSet } />\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t: null\r\n\t\t\t\t\t}\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className={'pure-u-5-12 l-box'}>\r\n\t\t\t\t\t<span> Dataset </span><br/>\r\n\t\t\t\t\t<Select\r\n\t\t\t\t\t\tdefaultValue={this.props.selected || null}\r\n\t\t\t\t\t\tlabel=\"Dataset\"\r\n\t\t\t\t\t\tclassName=\"basic-single git-option\"\r\n\t\t\t\t\t\tclassNamePrefix=\"select\"\r\n\t\t\t\t\t\tvalue={selectedDataset}\r\n\t\t\t\t\t\tisClearable\r\n\t\t\t\t\t\tisDisabled={this.props.selected}\r\n\t\t\t\t\t\tonChange={this.datasetChange}\r\n\t\t\t\t\t\tfilterOption={createFilter({ignoreAccents: false})}\r\n\t\t\t\t\t\toptions={this.props.datasets}\r\n\t\t\t\t\t\tcomponents={{Option: CustomOption}}\r\n\t\t\t\t\t/>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className={'pure-u-1-3 l-box'}>\r\n\t\t\t\t\t<span> Genotype </span><br/>\r\n\t\t\t\t\t<Select\r\n\t\t\t\t\t\tclassName=\"basic-single git-option\"\r\n\t\t\t\t\t\tclassNamePrefix=\"select\"\r\n\t\t\t\t\t\tvalue={selectedGenotype}\r\n\t\t\t\t\t\tisClearable\r\n\t\t\t\t\t\tisDisabled={gtOpt.length === 0}\r\n\t\t\t\t\t\tonChange={this.gtChange}\r\n\t\t\t\t\t\tfilterOption={createFilter({ignoreAccents: false})}\r\n\t\t\t\t\t\toptions={gtOpt}\r\n\t\t\t\t\t\tcomponents={{Option: CustomOption}}\r\n\t\t\t\t\t/>\r\n\t\t\t\t</div>\r\n\t\t\t\t{this.props.removeOption !== undefined\r\n\t\t\t\t\t? <div className={'pure-u-1-12 l-box'}>\r\n\t\t\t\t\t\t<span>Remove</span>\r\n\t\t\t\t\t\t<div className={'fake-button git-option'} onClick={()=> this.props.removeOption(idx)} > X </div>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t: null\r\n\t\t\t\t}\r\n\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\n/**\r\n * custom rendering options for react-select (select dropdown) component\r\n */\r\nclass CustomOption extends React.Component {\r\n\trender() {\r\n\t\tconst {innerProps, isFocused, ...otherProps} = this.props;\r\n\t\tconst {onMouseMove, onMouseOver, ...otherInnerProps} = innerProps;\r\n\t\tconst newProps = {innerProps: {...otherInnerProps}, ...otherProps};\r\n\t\treturn (\r\n\t\t\t<components.Option {...newProps} className=\"git-option-component\">{this.props.children}\r\n\t\t\t</components.Option>\r\n\t\t);\r\n\t}\r\n}\r\n","/**\r\n * Select reference genotype\r\n */\r\nimport React from 'react';\r\nimport GenotypeSelector from './GenotypeSelect';\r\n\r\nexport default class ReferenceForm extends React.Component {\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<fieldset className={'genotype-field'}>\r\n\t\t\t\t<legend> Reference Genotype</legend>\r\n\t\t\t\t<GenotypeSelector\r\n\t\t\t\t\tdatasets={this.props.datasets}\r\n\t\t\t\t\tsetDataset={this.props.setDataset}\r\n\t\t\t\t\tappendDataset={this.props.appendDataset}\r\n\t\t\t\t\tgenotypes={this.props.genotypes}\r\n\t\t\t\t\tidx={0}\r\n\t\t\t\t/>\r\n\t\t\t</fieldset>\r\n\t\t);\r\n\t}\r\n}\r\n","/**\r\n * React component for rendering the comparison genotype selection menu\r\n */\r\n\r\nimport React from 'react';\r\nimport GenotypeSelector from './GenotypeSelect'; //Generic gt select component\r\n\r\nexport default class CompareForm extends React.Component {\r\n\r\n\tstate = {\r\n\t\toptions: [], // currently selected comparisons\r\n\t\tcount: 1 // tracks actual length of non-null entries.\r\n\t};\r\n\t// remove option selection\r\n\tremoveOption = (rm) => {\r\n\t\tlet options = this.state.options.filter(opt => {\r\n\t\t\treturn opt.key !== `${rm}`;\r\n\t\t});\r\n\t\tthis.props.appendDataset(rm,null);\r\n\t\tthis.setState({options});\r\n\t}\r\n        // add option selection\r\n\taddOption = () => {\r\n\t\tlet options = this.state.options.concat([\r\n\t\t\t<GenotypeSelector\r\n\t\t\t\tkey={this.state.count}\r\n\t\t\t\tidx={this.state.count}\r\n\t\t\t\tselected={this.props.selected}\r\n\t\t\t\tgenotypes={this.props.genotypes}\r\n\t\t\t\tappendDataset={this.props.appendDataset}\r\n\t\t\t\tremoveOption={this.removeOption}\r\n\t\t\t/>\r\n\t\t]);\r\n\t\tthis.setState({options,count:this.state.count+1});\r\n\t};\r\n\r\n\t// prevents issues when all options are removed\r\n\tcomponentDidUpdate(prevProps, prevState, snapshot) {\r\n\t\tif(this.props.selected !== prevProps.selected){\r\n\t\t\tthis.setState({'count':1, 'options':[]})\r\n\t\t}\r\n\t}\r\n\r\n\t// render component\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<fieldset className={'genotype-field'}>\r\n\t\t\t\t<legend> Comparison Genotypes </legend>\r\n\t\t\t\t{this.state.options}\r\n\t\t\t\t<div\r\n\t\t\t\t\tclassName={'fake-button'}\r\n\t\t\t\t\tonClick={this.addOption}\r\n\t\t\t\t>\r\n\t\t\t\t\tAdd Comparison\r\n\t\t\t\t</div>\r\n\t\t\t</fieldset>\r\n\t\t);\r\n\t}\r\n}\r\n","/**\r\n * Set default settings for heat map display type\r\n */\r\n\r\nimport {binSizeDefault} from \"./DefaultConfiguration\";\r\n\r\nexport function heatConfig(compare, side, minValue, maxValue,filters){\r\n  return {\r\n      feature: compare.value,\r\n      glyph: 'measure',\r\n      display: 'heat',\r\n      draw_as: 'range',\r\n      invert_value: 0,\r\n      min: 0,\r\n      max: 0,\r\n      width: 10,\r\n      offset:  side ? 0 : -0,\r\n      bin_size: binSizeDefault,\r\n      bin_min: minValue,\r\n      bin_max: maxValue,\r\n      by_class: 1,\r\n      class_filter: filters.map( filter => filter.value),\r\n      class_offset: 2,\r\n      class_heat : ['#fff'],\r\n      draw_label: 0,\r\n      max_distance: 5,\r\n      border: 0,\r\n      value_base: 10,\r\n      generate_bins: 0,\r\n      count_classes: 0,\r\n      transparent: 0,\r\n      transparent_percent: 0.0\r\n  };\r\n}\r\n","/**\r\n * Set default options for histogram display\r\n */\r\nimport {binSizeDefault} from \"./DefaultConfiguration\";\r\n\r\nexport function histConfig(compare,side,minValue,maxValue,filters,count){\r\n    return {\r\n      feature: compare.value,\r\n      glyph: 'measure',\r\n      display: 'histogram',\r\n      count_classes: 0,\r\n      enable_pileup: 0,\r\n      generate_bins: 0,\r\n      offset: side ? 0 : -0,\r\n      width: 3,\r\n      bin_min: minValue,\r\n      bin_max: maxValue,\r\n      bin_size: binSizeDefault,\r\n      by_class: 1,\r\n      class_offset : 0,\r\n      class_filter: filters.map( filter => filter.value),\r\n      draw_label: 0,\r\n      max_distance: count*25,\r\n      border: 1,\r\n      border_width :0,\r\n    };\r\n}\r\n","/**\r\n * Sets default options for \"haplotype\" display type\r\n */\r\n\r\nimport {binSizeDefault} from \"./DefaultConfiguration\";\r\n\r\nexport function haploConfig(compare,side,minValue,maxValue,filters){\r\n  return {\r\n    feature : compare.value,\r\n    glyph: 'measure',\r\n    display: 'histogram',\r\n    count_classes: 0,\r\n    class_offset: 0,\r\n    class_space : 1,\r\n    enable_pileup: 0,\r\n    generate_bins: 0,\r\n    offset: side ? 0 : -0,\r\n    width: 3,\r\n    bin_min: maxValue -1 > 0 ? maxValue - 1 : 0 ,\r\n    bin_max: maxValue > 0 ?  maxValue : 1,\r\n    bin_size: binSizeDefault,\r\n    by_class: 1,\r\n    class_filter: filters.map( filter => filter.value),\r\n    draw_label: 0,\r\n    max_distance: 5,\r\n    border: 1,\r\n    border_width: 0,\r\n  };\r\n}\r\n","/**\r\n * Control for editing LHS/RHS comparison options\r\n * for display in CViT canvas\r\n */\r\n\r\nimport React from 'react';\r\nimport Select from 'react-select';\r\nimport {heatConfig} from './HeatConfig';\r\nimport {histConfig} from './HistConfig';\r\nimport {haploConfig} from './HaploConfig';\r\n\r\n// Display format dropdown values\r\nconst displayFormats = [\r\n    {\r\n        value: 'none',\r\n        label: 'None'\r\n    },\r\n    {\r\n        value: 'hist',\r\n        label: 'Histogram'\r\n    },\r\n    {\r\n        value: 'heat',\r\n        label: 'Heatmap'\r\n    },\r\n    {\r\n        value: 'haplo',\r\n        label: 'Haplotype',\r\n    },\r\n];\r\n\r\n// Comparison format dropdown values\r\nconst comparisonFormats = [\r\n    {\r\n        value: 'diff',\r\n        label: 'Different'\r\n    },\r\n    {\r\n        value: 'same',\r\n        label: 'Same'\r\n    },\r\n    {\r\n        value: 'total',\r\n        label: 'Total'\r\n    },\r\n];\r\n\r\n// heatmap direction dropdown values\r\nconst heatFormat = [\r\n    {\r\n        value: 'low',\r\n        label: 'Min-Max'\r\n    },\r\n    {\r\n        value: 'high',\r\n        label: 'Max-Min'\r\n    },\r\n];\r\n\r\n// heatmap color dropdown values\r\nconst heatColorFormat = [\r\n    {\r\n        value: 'white',\r\n        label: 'White'\r\n    },\r\n    {\r\n        value: 'black',\r\n        label: 'Black'\r\n    },\r\n];\r\n\r\nexport default class TrackOptions extends React.Component {\r\n    state = {\r\n        displayAs: displayFormats[0],\r\n        compare: comparisonFormats[0],\r\n        filters: [],\r\n        heat: heatFormat[0],\r\n        heatColor: heatColorFormat[0],\r\n        viewConfig: {},\r\n        maxValue: 0,\r\n        minValue: 0,\r\n    }\r\n\r\n    /**\r\n     * set configuration on display type change from defaults\r\n     */\r\n    setConfiguration = (format) => {\r\n        const {compare,filters, maxValue, minValue} = this.state;\r\n        const side = this.props.side === 'Right';\r\n        let count = 1;\r\n        this.props.genotypes.forEach(gt => {if(gt !== null) count++;});\r\n        switch (format) {\r\n            case 'heat':\r\n               return heatConfig(compare,side,minValue,maxValue,filters);\r\n            case 'hist':\r\n               return histConfig(compare,side,minValue,maxValue,filters,count);\r\n            case 'haplo':\r\n                return haploConfig(compare,side,minValue,maxValue,filters,count);\r\n            case 'none':\r\n            default:\r\n                return {'feature':'none'};\r\n        }\r\n    };\r\n\r\n\r\n    /**\r\n     * update selected options in parents\r\n     */\r\n    optionsUpdate = (value) => {\r\n        this.props.optionsUpdate(this.props.side.toLowerCase(),value);\r\n    }\r\n\r\n    /**\r\n     * Action on changing DisplayAs dropdown\r\n     */\r\n    displayChange = (displayAs) => {\r\n        let viewConfig = this.setConfiguration(displayAs.value);\r\n        if(displayAs.value === 'haplo'){ // make sure haplotype block gets configured correctly\r\n            const maxValue = this.state.maxValue > 0 ? this.state.maxValue : 1;\r\n            const minValue = maxValue - 1;\r\n            this.setState({ displayAs,maxValue,minValue,viewConfig});\r\n        } else {\r\n            this.setState({displayAs, viewConfig});\r\n        }\r\n        this.optionsUpdate(viewConfig);\r\n    }\r\n\r\n    /**\r\n     * Update options on comparison type change\r\n     */\r\n    compareChange = (compare) => {\r\n        let viewConfig = this.state.viewConfig;\r\n        viewConfig.feature = compare.value;\r\n        this.setState({ compare, viewConfig });\r\n        this.optionsUpdate(viewConfig);\r\n    }\r\n\r\n\r\n    /**\r\n     * Update filter whitelist for features\r\n     */\r\n    filterChange = (filters) => {\r\n        let viewConfig = this.state.viewConfig;\r\n\tif (filters === null){\r\n\t\tfilters = [];\r\n\t}\r\n        viewConfig.class_filter = filters.map(filter => {\r\n\t\tif(filter!== null && filter.value){\r\n\t\t\treturn filter.value;\r\n\t\t}\r\n\t\treturn false;\r\n\t});\r\n        this.setState({ filters, viewConfig });\r\n        this.optionsUpdate(viewConfig);\r\n    }\r\n\r\n    /**\r\n     * Update heatcolor from dropdown\r\n     */\r\n    heatColorChange = (heatColor) => {\r\n        let viewConfig = this.state.viewConfig;\r\n        viewConfig.class_heat = [heatColor.value];\r\n        this.setState({ heatColor, viewConfig });\r\n        this.optionsUpdate(viewConfig);\r\n    }\r\n\r\n    /**\r\n     * Update direction from dropdown\r\n     */\r\n    heatChange = (heat) => {\r\n        let viewConfig = this.state.viewConfig;\r\n        viewConfig.invert_value = heat.value === 'low' ? 0 : 1;\r\n        this.setState({ heat, viewConfig });\r\n        this.optionsUpdate(viewConfig);\r\n    }\r\n    \r\n    /**\r\n     * Update bin count max from form\r\n     */\r\n    maxChange = (max) => {\r\n        const maxValue = parseInt(max.target.value) || 0;\r\n        let viewConfig = this.state.viewConfig;\r\n\r\n        if(this.state.displayAs.value === 'haplo'){\r\n            const hapMax = maxValue > 0 ? maxValue : 1;\r\n            const minValue = hapMax -1;\r\n            viewConfig.bin_max = hapMax;\r\n            viewConfig.bin_min = minValue;\r\n            this.setState({maxValue,minValue,viewConfig})\r\n        } else {\r\n            viewConfig.bin_max = maxValue;\r\n            this.setState({maxValue,viewConfig})\r\n        }\r\n        this.optionsUpdate(viewConfig);\r\n    }\r\n\r\n    /**\r\n     * Update bin count min from form\r\n     */\r\n    minChange = (min) => {\r\n        const minValue = parseInt(min.target.value) || 0;\r\n        let viewConfig = this.state.viewConfig;\r\n        viewConfig.bin_min = minValue;\r\n        this.setState({minValue,viewConfig});\r\n        this.optionsUpdate(viewConfig);\r\n    }\r\n\r\n    render(props,state) {\r\n        const { displayAs, compare, filters, heatColor, heat, maxValue, minValue } = this.state;\r\n        const { side, genotypes } = this.props;\r\n        let filterFormats = [];\r\n        genotypes.forEach( (gt,count) => {\r\n            if((compare.value === 'total' || count > 0) && gt !== null){\r\n                filterFormats = filterFormats.concat( gt.genotype);\r\n            }\r\n        });\r\n\r\n\t// hide filter dropdown if \"none\" is selected\r\n        let filter = displayAs.value !== 'none'\r\n            ? (<div className={'pure-u-1-3 l-box'}>\r\n                    <span>Filter Genotypes</span>\r\n                    <Select\r\n                        defaultValue={null}\r\n                        className=\"basic-multi-select git-option\"\r\n                        isMulti\r\n                        isClearable\r\n                        name={\"filterGT\"}\r\n                        classNamePrefix=\"select\"\r\n                        value={filters}\r\n                        onChange={this.filterChange}\r\n                        options={filterFormats}\r\n                    />\r\n                </div>\r\n            )\r\n            : null; \r\n\r\n        return (\r\n            <fieldset className={'genotype-field'}>\r\n                <legend> {`${side} Options`} </legend>\r\n                <div className={'pure-g genotype-select'}>\r\n                    <div className={'pure-u-1-6 l-box'}>\r\n                        <span>Display Type</span>\r\n                        <Select\r\n                            defaultValue={displayFormats[0]}\r\n                            className=\"basic-single git-option\"\r\n                            classNamePrefix=\"select\"\r\n                            value={displayAs}\r\n                            label={\"Display As:\"}\r\n                            onChange={this.displayChange}\r\n                            options={displayFormats}\r\n                        />\r\n                    </div>\r\n                    {displayAs.value !== 'none' ?\r\n                        <div className={'pure-u-1-6 l-box'}>\r\n                            <span>Comparison</span>\r\n                            <Select\r\n                                defaultValue={comparisonFormats[0]}\r\n                                className=\"basic-single git-option\"\r\n                                classNamePrefix=\"select\"\r\n                                value={compare}\r\n                                label={`Comparison ${side}`}\r\n                                onChange={this.compareChange}\r\n                                options={comparisonFormats}\r\n                            />\r\n                        </div>\r\n                        : null\r\n                    }\r\n                    {filter}\r\n                    {displayAs.value === 'none'\r\n                        ? null\r\n                        :\r\n                        <div className={'pure-u-1-6 l-box'}>\r\n                            <span>{displayAs.value === 'heat' || displayAs.value === 'hist' ? 'Max Value' : 'Threshold' }</span>\r\n                            <input type={'text'} value={maxValue} className={'pure-u-1-1 l-box git-option'} id={`max-${side}`} placeholder={'0'} onInput={(e) => this.maxChange(e)}/>\r\n\r\n                        </div>\r\n                    }\r\n                    {displayAs.value !== 'none' && displayAs.value !== 'haplo'\r\n                        ?\r\n                        <div className={'pure-u-1-6 l-box'}>\r\n                            <span>Min Value</span>\r\n                            <input type={'text'} value={minValue} className={'pure-u-1-1 l-box git-option'} id={`min-${side}`} placeholder={'0'} onInput={(e) => this.minChange(e)}/>\r\n                        </div>\r\n                        :\r\n                        null\r\n                    }\r\n                </div>\r\n                {displayAs.value === 'heat'\r\n                    ?\r\n                    <div className={'pure-g genotype-select'}>\r\n                        <div className={'pure-u-1-6 l-box'}>\r\n                            <div className={'pure-u-1-1 l-box'}> <br/> </div>\r\n                        </div>\r\n                        <div className={'pure-u-1-6 l-box'}>\r\n                            <span>Heat Base Color</span>\r\n                            <Select\r\n                                defaultValue={heatColorFormat[0]}\r\n                                className=\"basic-single git-option\"\r\n                                classNamePrefix=\"select\"\r\n                                value={heatColor}\r\n                                onChange={this.heatColorChange}\r\n                                options={heatColorFormat}\r\n                            />\r\n                        </div>\r\n                        <div className={'pure-u-1-6 l-box'}>\r\n                            <span>Heat Direction</span>\r\n                            <Select\r\n                                defaultValue={heatFormat[0]}\r\n                                className=\"basic-single git-option\"\r\n                                classNamePrefix=\"select\"\r\n                                value={heat}\r\n                                onChange={this.heatChange}\r\n                                options={heatFormat}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                    :\r\n                    null}\r\n            </fieldset>\r\n        );\r\n    }\r\n}\r\n","/**\r\n * Options configuration for rulers, bins and other general display.\r\n */\r\n\r\nimport React from 'react';\r\nimport Select from 'react-select';\r\nimport {rulerDisplayDefault, binSizeDefault,rulerIntervalDefault,titleDefault} from './DefaultConfiguration'; //sub-components\r\n\r\n/**\r\n * Quick setup for defining ruler options\r\n * @type {*[]}\r\n */\r\n\r\nconst rulerDisplayOptions = [\r\n    {\r\n        value: 'L',\r\n        label: 'Left'\r\n    },\r\n    {\r\n        value: 'R',\r\n        label: 'Right'\r\n    },\r\n    {\r\n        value: '1',\r\n        label: 'Both'\r\n    },\r\n    {\r\n        value: '0',\r\n        label: 'None'\r\n    },\r\n];\r\n\r\n/**\r\n * Options component react class\r\n */\r\nexport default class BaseOptions extends React.Component {\r\n    state = {\r\n        rulerDisplay : rulerDisplayDefault(rulerDisplayOptions), // Display ruler on LHS\r\n        binSize : binSizeDefault,   // Default binsize of 500000 bp\r\n        rulerInterval: rulerIntervalDefault, // Default interval of 5000000 bp\r\n        title: titleDefault,  // Blank default title\r\n    };\r\n\r\n    /**\r\n     * Pass updated options back to model\r\n     * @param value\r\n     */\r\n    optionsUpdate = (value) => {\r\n        this.props.optionsUpdate('general',value);\r\n    };\r\n    \r\n    /**\r\n     * Change ruler placement in cvit canvas component\r\n     * @param value\r\n     */\r\n    rulerChange = (rulerDisplay) => {\r\n        let values = this.state;\r\n        values.rulerDisplay = rulerDisplay;\r\n        this.setState({rulerDisplay});\r\n        this.optionsUpdate(values);\r\n    };\r\n\r\n\r\n    /**\r\n     * Change title in cvit canvas component\r\n     * @param e form event\r\n     */\r\n    titleChange = (e) => {\r\n        const title = e.target.value;\r\n        let values = this.state;\r\n        values.title = title;\r\n        this.setState({title});\r\n        this.optionsUpdate(values);\r\n    };\r\n\r\n    /**\r\n     * Change number of bases used for binning\r\n     * @param e form event\r\n     */\r\n    binChange = (e) => {\r\n        const binSize = parseInt(e.target.value) || 1;\r\n        let values = this.state;\r\n        values.binSize = binSize;\r\n        this.setState({binSize});\r\n        this.optionsUpdate(values);\r\n    };\r\n\r\n\r\n    /**\r\n     * Change major intervals on ruler in cvit component\r\n     * @param e form event\r\n     */\r\n    intervalChange = (e) => {\r\n        const rulerInterval = parseInt(e.target.value) || 1;\r\n        let values = this.state;\r\n        values.rulerInterval = rulerInterval;\r\n        this.setState({rulerInterval});\r\n        this.optionsUpdate(values);\r\n    };\r\n\r\n    \r\n    /**\r\n     * Render options component\r\n     * @param props react component props\r\n     * @param state react component state\r\n     */\r\n    render(props,state) {\r\n        const { rulerDisplay, binSize, rulerInterval, title } = this.state;\r\n        return (\r\n            <fieldset className={'genotype-field'}>\r\n                <legend> General Options </legend>\r\n                <div className={'pure-g genotype-select'}>\r\n                    <div className={'pure-u-1-2 l-box'}>\r\n                        <span> Title </span>\r\n                        <input type={'text'} value={title} className={'pure-u-1-1 l-box git-option'} id={`title-gen`} placeholder={titleDefault} onInput={e=>this.titleChange(e)} />\r\n                    </div>\r\n                    <div className={'pure-u-1-6 l-box'}>\r\n                        <span> Bin Size </span>\r\n                        <input type={'text'} value={binSize} className={'pure-u-1-1 l-box git-option'} id={`binsize-gen`} placeholder={binSizeDefault} onInput={e=>this.binChange(e)}/>\r\n                    </div>\r\n                    <div className={'pure-u-1-6 l-box'}>\r\n                        <span> Ruler Display </span>\r\n                        <Select\r\n                            defaultValue={rulerDisplayDefault(rulerDisplayOptions)}\r\n                            className=\"basic-single git-option\"\r\n                            classNamePrefix=\"select\"\r\n                            value={rulerDisplay}\r\n                            label={\"Comparison\"}\r\n                            onChange={this.rulerChange}\r\n                            options={rulerDisplayOptions}\r\n                        />\r\n                    </div>\r\n                    {rulerDisplay.value !== '0'\r\n                        ?\r\n                        <div className={'pure-u-1-6 l-box'}>\r\n                            <span> Ruler Interval </span>\r\n                            <input type={'text'} value={rulerInterval} className={'pure-u-1-1 l-box git-option'} id={`rulertic-gen`}\r\n                                   placeholder={rulerIntervalDefault} onInput={e=> this.intervalChange(e)}/>\r\n                        </div>\r\n                        : null\r\n                    }\r\n                </div>\r\n            </fieldset>\r\n        );\r\n    }\r\n}\r\n","/**\r\n * Form for controlling display options on the\r\n * CViT canvas div BaseOptions controls rulers/title\r\n * TrackOptions controls LHS/RHS options\r\n */\r\nimport React from 'react';\r\nimport TrackOptions from \"./TrackOptionsSelect\";\r\nimport BaseOptions from \"./BaseOptionsSelect\";\r\nimport {binSizeDefault} from \"./DefaultConfiguration\";\r\n\r\nexport default class OptionsForm extends React.Component {\r\n\tstate = {\r\n\t\t'binSize': binSizeDefault,\r\n\t}\r\n\t\r\n\t/**\r\n\t * Setup options and pass to parent\r\n\t */\r\n\toptionsUpdate = (group,value) => {\r\n\t\tlet options = this.props.options;\r\n\r\n\t\tlet binSize = this.state.binSize;\r\n\t\tswitch (group) {\r\n\t\t\tcase 'left':\r\n\t\t\t\toptions.left = value;\r\n\t\t\t\toptions.left.bin_size = binSize;\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'right':\r\n\t\t\t\toptions.right = value;\r\n\t\t\t\toptions.right.bin_size = binSize;\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'general':\r\n\t\t\tdefault:\r\n\t\t\t\tbinSize = value.binSize;\r\n\t\t\t\toptions.general.title = value.title;\r\n\t\t\t\toptions.general.tick_interval = value.rulerInterval;\r\n\t\t\t\toptions.general.display_ruler = value.rulerDisplay.value;\r\n\t\t\t\toptions.left.bin_size = binSize;\r\n\t\t\t\toptions.right.bin_size = binSize;\r\n\t\t\t\tthis.setState({binSize});\r\n\t\t}\r\n\t\tthis.props.setOptions(options);\r\n\t}\r\n\r\n\trender(props,state) {\r\n\t\tconst { genotypes } = this.props;\r\n\t\treturn (\r\n\t\t\t<fieldset className={'genotype-field'} >\r\n\t\t\t\t<legend>Options </legend>\r\n\t\t\t\t<BaseOptions optionsUpdate={(group,value)=>this.optionsUpdate(group,value)} />\r\n\t\t\t\t<TrackOptions side={'Left'} genotypes={genotypes} optionsUpdate={(group,value)=>this.optionsUpdate(group,value)}/>\r\n\t\t\t\t<TrackOptions side={'Right'} genotypes={genotypes} optionsUpdate={(group,value)=>this.optionsUpdate(group,value)}/>\r\n\t\t\t</fieldset>\r\n\t\t);\r\n\t}\r\n}\r\n","import React from 'react';\r\n\r\nexport default class About extends React.Component {\r\n    render () {\r\n        return (\r\n            <div>\r\n                <div className={'pure-g'}>\r\n                    <h6> About </h6>\r\n                </div>\r\n                <div className={'pure-g'}>\r\n                    <div className={'pure-u-1-1 l-box modal-section'}>\r\n                        <p> \r\n                          GCViT: a multiple chromosome visualisation tool for \r\n                          visualizing resequencing or SNP array data. GCViT permits \r\n                          comparison of multiple accessions to a reference accession \r\n                          within a single dataset, to visually identify regions of \r\n                          similarities and differences across the genome. \r\n                        </p>\r\n                        <iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/B2gPVUipWo0\" frameBorder=\"0\"\r\n                                allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\"\r\n                                allowFullScreen title=\"Introduction to GCViT\">\r\n                        </iframe>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nexport default class ReferenceGenotype extends React.Component {\r\n    state= {hideInfo:true};\r\n    render () {\r\n        const {hideInfo} = this.state;\r\n        return (\r\n            <div>\r\n                <div className={'pure-g'}>\r\n                    <div\r\n                        className={'pure-u-1-1 l-box fake-button'}\r\n                        onClick={()=>{this.setState({hideInfo:!hideInfo})}}\r\n                    >\r\n                        <div className={'pure-g'}>\r\n                            <div className={'pure-u-1-12 l-box'} > <div className={hideInfo ? 'arrow-down rotate':'arrow-down'}/> </div>\r\n                            <div className={'pure-u-5-6 l-box'}> Reference Genotype </div>\r\n                            <div className={'pure-u-1-12 l-box'} > <div className={hideInfo ? 'arrow-down rotate':'arrow-down'}/> </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className={'pure-g'}>\r\n                    <div className={'help-text pure-g'} style={{maxHeight: hideInfo ? '0px' : '50%'}}>\r\n                        <div className={'pure-u-1-1 l-box modal-section'}>\r\n                            <p>\r\n                                <ul>\r\n                                    <li> \r\n                                      Pick a Color that will represent the reference \r\n                                      genotype. Please note that this color will only \r\n                                      show up when “total” is selected in the display \r\n                                      options. \r\n                                    </li>\r\n                                    <li> \r\n                                      Pick a dataset to explore. Note that comparisons\r\n                                      can only be done within a single dataset.\r\n                                    </li>\r\n                                    <li>\r\n                                      Select which genotype will be the reference by \r\n                                      either typing in the name of the genotype or using \r\n                                      the pull down menu to see available genotypes. All\r\n                                      comparison genotypes selected in the next step will\r\n                                      be compared against this genotype.</li>\r\n                                </ul>\r\n                                *(note that large data sets may take a few seconds load,\r\n                                before the accession names to appear in the pull down\r\n                                menu.)\r\n                            </p>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}","import React from 'react';\r\n\r\nexport default class ComparisonGenotype extends React.Component {\r\n    state= {hideInfo:true};\r\n    render () {\r\n        const {hideInfo} = this.state;\r\n        return (\r\n            <div>\r\n                <div className={'pure-g'}>\r\n                    <div\r\n                        className={'pure-u-1-1 l-box fake-button'}\r\n                        onClick={()=>{this.setState({hideInfo:!hideInfo})}}\r\n                    >\r\n                        <div className={'pure-g'}>\r\n                            <div className={'pure-u-1-12 l-box'} > <div className={hideInfo ? 'arrow-down rotate':'arrow-down'}/> </div>\r\n                            <div className={'pure-u-5-6 l-box'}> Comparison Genotype </div>\r\n                            <div className={'pure-u-1-12 l-box'} > <div className={hideInfo ? 'arrow-down rotate':'arrow-down'}/> </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className={'pure-g'}>\r\n                    <div className={'help-text pure-g'} style={{maxHeight: hideInfo ? '0px' : '50%'}}>\r\n                        <div className={'pure-u-1-1 l-box modal-section'}>\r\n                            <p>\r\n                                One or more comparison genotypes can be specified. Note\r\n                                that Comparisons can only be made within the same dataset.\r\n                            </p>\r\n                            <p>\r\n                                <ul>\r\n                                    <li> \r\n                                      Pick a Color that will represent the comparison\r\n                                      genome. If comparing multiple genotypes it will be\r\n                                      important to pick distinct colors for each.\r\n                                    </li>\r\n                                    <li> \r\n                                      Select a comparison genotype by either typing in \r\n                                      the name of the genotype or using the pull down \r\n                                      menu to see available genotypes. \r\n                                    </li>\r\n                                    <li> \r\n                                      Remove a comparison genotype by clicking on the \r\n                                      <b>X</b>. \r\n                                    </li>\r\n                                </ul>\r\n                            </p>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nexport default class GeneralOptions extends React.Component {\r\n    state= {hideInfo:true};\r\n    render () {\r\n        const {hideInfo} = this.state;\r\n        return (\r\n            <div>\r\n                <div className={'pure-g'}>\r\n                    <div\r\n                        className={'pure-u-1-1 l-box fake-button'}\r\n                        onClick={()=>{this.setState({hideInfo:!hideInfo})}}\r\n                    >\r\n                        <div className={'pure-g'}>\r\n                            <div className={'pure-u-1-12 l-box'} > <div className={hideInfo ? 'arrow-down rotate':'arrow-down'}/> </div>\r\n                            <div className={'pure-u-5-6 l-box'}> General Options </div>\r\n                            <div className={'pure-u-1-12 l-box'} > <div className={hideInfo ? 'arrow-down rotate':'arrow-down'}/> </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className={'pure-g'}>\r\n                    <div className={'help-text pure-g'} style={{maxHeight: hideInfo ? '0px' : '50%'}}>\r\n                        <div className={'pure-u-1-1 l-box modal-section'}>\r\n                            <p>\r\n                              <b>Title</b> <i>Default: blank</i> Title shown on the display. \r\n                            </p>\r\n                            <p> \r\n                              <b>Bin Size</b> <i>Default: 500000bp</i> Because the data \r\n                              on a whole genome display is highly condensed, it must be \r\n                              divided into bins, with the data within each bin averaged,\r\n                              counted, or otherwise combined into one value. Large \r\n                              genomes and/or very dense data sets suggest smaller bin \r\n                              sizes. However, setting the bin size too small will slow \r\n                              down rendering of the image to the point it may not display \r\n                              at all or it may become difficult or impossible to see \r\n                              differences in the data. For large genomes, it is \r\n                              recommended to not set the bin size much lower than \r\n                              500000.\r\n                            </p>\r\n                            <p> \r\n                              <b>Ruler Display</b> <i>Default: left</i> Where ruler is placed on the image. \r\n                            </p>\r\n                            <p> \r\n                              <b>Ruler Interval</b> <i>Default: 5000000</i> Measured in\r\n                              bp, indicates how often to draw tic marks on the ruler. \r\n                              Each major tic mark will be labeled with a number and have \r\n                              one minor division between. Any value below 1000000 is \r\n                              likely to cause labels to overlap and be unreadable.\r\n                            </p>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}","import React from 'react';\r\n\r\nexport default class DisplayNone extends React.Component {\r\n    state= {hideInfo:true};\r\n    render () {\r\n        const {hideInfo} = this.state;\r\n        return (\r\n            <div>\r\n                <div className={'pure-g'}>\r\n                    <div\r\n                        className={'pure-u-1-1 l-box fake-button'}\r\n                        onClick={()=>{this.setState({hideInfo:!hideInfo})}}\r\n                    >\r\n                        <div className={'pure-g'}>\r\n                            <div className={'pure-u-1-12 l-box'} > <div className={hideInfo ? 'arrow-down rotate':'arrow-down'}/> </div>\r\n                            <div className={'pure-u-5-6 l-box'}> Display Type: None </div>\r\n                            <div className={'pure-u-1-12 l-box'} > <div className={hideInfo ? 'arrow-down rotate':'arrow-down'}/> </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className={'pure-g'}>\r\n                    <div className={'help-text pure-g'} style={{maxHeight: hideInfo ? '0px' : '50%'}}>\r\n                        <div className={'pure-u-1-1 l-box modal-section'}>\r\n                            <p>Don't render anything on this side of the chromosome backbone.</p>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}","import React from 'react';\r\n\r\nexport default class DisplayHaplotype extends React.Component {\r\n    state= {hideInfo:true};\r\n    render () {\r\n        const {hideInfo} = this.state;\r\n        return (\r\n            <div>\r\n                <div className={'pure-g'}>\r\n                    <div\r\n                        className={'pure-u-1-1 l-box fake-button'}\r\n                        onClick={()=>{this.setState({hideInfo:!hideInfo})}}\r\n                    >\r\n                        <div className={'pure-g'}>\r\n                            <div className={'pure-u-1-12 l-box'} > <div className={hideInfo ? 'arrow-down rotate':'arrow-down'}/> </div>\r\n                            <div className={'pure-u-5-6 l-box'}> Display Type: Haplotype </div>\r\n                            <div className={'pure-u-1-12 l-box'} > <div className={hideInfo ? 'arrow-down rotate':'arrow-down'}/> </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className={'pure-g'}>\r\n                    <div className={'help-text pure-g'} style={{maxHeight: hideInfo ? '0px' : '50%'}}>\r\n                        <div className={'pure-u-1-1 l-box modal-section'}>\r\n                            <p>Shows SNPs as block regions that only display if the count in the bin meets the provided threshold.</p>\r\n                            <p>\r\n                                This Display is good for:\r\n                                <ul>\r\n                                    <li> Viewing inheritance when comparing a line with its parents.</li>\r\n                                </ul>\r\n                            </p>\r\n                            <p> <b>Comparison</b> <i>Default: different</i>  Which comparison with the reference to display.\r\n                                <ul>\r\n                                    <li><b>Different</b>: Positions where reference and comparison line have different alleles.</li>\r\n                                    <li><b>Same</b>: Positions where reference and comparison line have the same alleles.</li>\r\n                                    <li><b>Total</b>: Total number of SNPs for reference and comparison, alongside a count for locations where the allele was undefined.</li>\r\n                                </ul>\r\n                            </p>\r\n                            <p> <b>Filter Genotypes</b> <i>Default: all [blank]</i> Allows the restriction of the displayed genotypes when more-than-one is available,\r\n                            due to either more-than-one comparison, or using the total comparison. If not empty, only the selected genotypes will display.  This option is useful if the user would like to see the differences between the reference and each comparison on opposite sides of the chromosome.\r\n                            </p>\r\n                            <p> <b>Threshold</b> <i>Default: 1</i> The glyph is only drawn if the count matches or exceeds this number.</p>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}","import React from 'react';\r\n\r\nexport default class DisplayHistogram extends React.Component {\r\n    state= {hideInfo:true};\r\n    render () {\r\n        const {hideInfo} = this.state;\r\n        return (\r\n            <div>\r\n                <div className={'pure-g'}>\r\n                    <div\r\n                        className={'pure-u-1-1 l-box fake-button'}\r\n                        onClick={()=>{this.setState({hideInfo:!hideInfo})}}\r\n                    >\r\n                        <div className={'pure-g'}>\r\n                            <div className={'pure-u-1-12 l-box'} > <div className={hideInfo ? 'arrow-down rotate':'arrow-down'}/> </div>\r\n                            <div className={'pure-u-5-6 l-box'}> Display Type: Histogram </div>\r\n                            <div className={'pure-u-1-12 l-box'} > <div className={hideInfo ? 'arrow-down rotate':'arrow-down'}/> </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className={'pure-g'}>\r\n                    <div className={'help-text pure-g'} style={{maxHeight: hideInfo ? '0px' : '50%'}}>\r\n                        <div className={'pure-u-1-1 l-box modal-section'}>\r\n                            <p>Shows SNPs as block regions with a height that is proportional to the count in the bin and the provided min and max values.\r\n                                Similar to the heat map option, but uses volume instead of color to indicate bin density.</p>\r\n                            <p> <b>Comparison</b> <i>Default: different</i>  Which comparison with the reference to display.\r\n                                <ul>\r\n                                    <li><b>Different</b>: Positions where reference and comparison line have different alleles.</li>\r\n                                    <li><b>Same</b>: Positions where reference and comparison line have the same alleles.</li>\r\n                                    <li><b>Total</b>: Total number of SNPs for reference and comparison, alongside a count for locations where the allele was undefined.</li>\r\n                                </ul>\r\n                            </p>\r\n                            <p> \r\n                              <b>Filter Genotypes</b> <i>Default: all [blank]</i> Select \r\n                              one or more genotypes or leave blank for all comparison \r\n                              genotypes.\r\n                            </p>\r\n                            <p> \r\n                              <b>Min Value</b> <i>Default: 0</i> Cutoff value for \r\n                              displaying any height on the glyph. Any count equal to or \r\n                              smaller than this number will not be displayed.\r\n                            </p>\r\n                            <p> \r\n                              <b>Max Value</b> <i>Default: 0</i> Cutoff value for \r\n                              displaying maximum height on the glyph. Any count equal to \r\n                              or larger than this number will be displayed as the full \r\n                              height. Here, 0 is shorthand for the largest count in the \r\n                              reference across all bins. \r\n                            </p>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}","import React from 'react';\r\n\r\nexport default class DisplayHeat extends React.Component {\r\n    state= {hideInfo:true};\r\n    render () {\r\n        const {hideInfo} = this.state;\r\n        return (\r\n            <div>\r\n                <div className={'pure-g'}>\r\n                    <div\r\n                        className={'pure-u-1-1 l-box fake-button'}\r\n                        onClick={()=>{this.setState({hideInfo:!hideInfo})}}\r\n                    >\r\n                        <div className={'pure-g'}>\r\n                            <div className={'pure-u-1-12 l-box'} > <div className={hideInfo ? 'arrow-down rotate':'arrow-down'}/> </div>\r\n                            <div className={'pure-u-5-6 l-box'}> Display Type: Heatmap </div>\r\n                            <div className={'pure-u-1-12 l-box'} > <div className={hideInfo ? 'arrow-down rotate':'arrow-down'}/> </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className={'pure-g'}>\r\n                    <div className={'help-text pure-g'} style={{maxHeight: hideInfo ? '0px' : '50%'}}>\r\n                        <div className={'pure-u-1-1 l-box modal-section'}>\r\n                            <p>Shows SNPs as block regions with a color that is proportional to the count in the bin and the provided min and max values.\r\n                                Similar to the heat map option, but color instead of volume to indicate bin density.</p>\r\n                            <p> <b>Comparison</b> <i>Default: different</i>  Which comparison with the reference to display.\r\n                                <ul>\r\n                                    <li><b>Different</b>: Positions where reference and comparison line have different alleles.</li>\r\n                                    <li><b>Same</b>: Positions where reference and comparison line have the same alleles.</li>\r\n                                    <li><b>Total</b>: Total number of SNPs for reference and comparison, alongside a count for locations where the allele was undefined.</li>\r\n                                </ul>\r\n                            </p>\r\n                            <p> \r\n                              <b>Filter Genotypes</b> <i>Default: all [blank]</i> Select \r\n                              one or more genotypes or leave blank for all comparison \r\n                              genotypes.\r\n                            </p>\r\n                            <p> \r\n                              <b>Min Value</b> <i>Default: 0</i> Cutoff value for \r\n                              displaying any height on the glyph. Any count equal to or \r\n                              smaller than this number will not be displayed.\r\n                            </p>\r\n                            <p> \r\n                              <b>Max Value</b> <i>Default: 0</i> Cutoff value for \r\n                              displaying maximum height on the glyph. Any count equal to \r\n                              or larger than this number will be displayed as the full \r\n                              height. Here, 0 is shorthand for the largest count in the \r\n                              reference across all bins. \r\n                            </p>\r\n                            <p> \r\n                              <b>Heat Base Color</b> <i>Default: white</i> Choose to \r\n                              go from white -> color or black -> color \r\n                            </p>\r\n                            <p> \r\n                              <b>Heat Direction</b> <i>Default: Min-Max</i> Render heat \r\n                              low-to-high as  base -> color (Min-Max) or color -> base (Max-Min) \r\n                            </p>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}","/**\r\n * Container for managing help documentation\r\n * all help topic contents are found in\r\n * src/Components/HelpTopics\r\n */\r\n\r\nimport React from 'react';\r\nimport About from \"./HelpTopics/About\";\r\nimport ReferenceGenotype from \"./HelpTopics/ReferenceGenotype\";\r\nimport ComparisonGenotype from \"./HelpTopics/ComparisonGenotype\";\r\nimport GeneralOptions from \"./HelpTopics/GeneralOptions\";\r\nimport DisplayNone from \"./HelpTopics/DisplayNone\";\r\nimport DisplayHaplotype from \"./HelpTopics/DisplayHaplotype\";\r\nimport DisplayHistogram from \"./HelpTopics/DisplayHistogram\";\r\nimport DisplayHeat from \"./HelpTopics/DisplayHeat\";\r\n\r\nexport default class HelpModal extends React.Component {\r\n    render () {\r\n        return(\r\n            <div className={\"modal-area selector-container\"}>\r\n                <div className={\"modal-content\"} >\r\n                    <h5> GCViT - Genotype Comparison Visualisation Tool </h5>\r\n                    <hr />\r\n                    <div className={'modal-contents'}>\r\n                        <About/>\r\n                        <h6> Genotypes </h6>\r\n                        <ReferenceGenotype/>\r\n                        <ComparisonGenotype/>\r\n                        <h6> Options </h6>\r\n                        <GeneralOptions/>\r\n                        <DisplayNone/>\r\n                        <DisplayHistogram/>\r\n                        <DisplayHeat/>\r\n                        <DisplayHaplotype/>\r\n                    </div>\r\n                </div>\r\n                <div className={'modal-close'}>\r\n                    <button className={'pure-button  button-display modal-confirm'}\r\n                            onClick={()=>this.props.closeAction()}\r\n                    > Close </button>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","/**\r\n * React component for rendering the \"export data\" modal\r\n */\r\n\r\nimport React from 'react';\r\nimport {imageTitleDefault} from \"./DefaultConfiguration\";\r\n\r\nexport default class DataModal extends React.Component {\r\n    state = {\r\n        name: imageTitleDefault,\r\n        format: 'svg',\r\n        quality: .95,\r\n        gffOptions: {\r\n            'chromosome':true,\r\n            'diff':true,\r\n            'same':true,\r\n            'total':true\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Save image using configured parameters\r\n     */\r\n    onClickImage = async function(){\r\n\t//toggle on load indicator\r\n        let loadIndicator = document.getElementById(\"img-load\");\r\n        loadIndicator.classList.toggle(\"download-loading\");\r\n\tconst url = this.state.format === 'svg' ? await this.resolveSVGBlob() : this.resolvePngBlob();\r\n\tthis.saveImage(url);\r\n    }\r\n    \r\n    /**\r\n     * Convert canvas to SVG blob url\r\n     */\r\n    resolveSVGBlob = () =>{\r\n\t    return new Promise(resolve => {\r\n\t\t    setTimeout(() => { // use short timeout to give DOM chance to render load indicator div\r\n   \t        \tlet paper = window.cvit.model.paper;\r\n                \tlet url = 'data:image/svg+xml;utf8,' +\r\n                \tencodeURIComponent(paper.project.exportSVG({asString:true}));\r\n\t        \tresolve(url);\r\n\t\t    }, 500);\r\n\r\n\t    });\r\n    }\r\n\r\n    /**\r\n     * Convert canvas to png blob url\r\n     */\r\n    resolvePngBlob = () => {\r\n        return new Promise(resolve => {\r\n            setTimeout(() => {\r\n   \t        let paper = window.cvit.model.paper;\r\n                paper.project.view.element.toBlob((blob) => {\r\n                    let url = URL.createObjectURL(blob);\r\n                    this.saveImage(url);\r\n                    resolve(url);\r\n\t\t});\r\n            }, 20);\r\n        });\r\n    };\r\n    \r\n    /**\r\n     * Download generated url blob\r\n     */\r\n    saveImage = (url) => {\r\n        let name = this.state.name !== '' ? this.state.name : 'gcvit';\r\n        name += `.${this.state.format}`;\r\n        let link = document.createElement('a');\r\n        link.download = name;\r\n        link.href = url;\r\n        document.body.appendChild(link);\r\n\t// toggle off load indicator\r\n        let loadIndicator = document.getElementById(\"img-load\");\r\n        loadIndicator.classList.toggle(\"download-loading\");\r\n        link.click();\r\n    };\r\n\r\n    onClickData = () => {\r\n        let gff = '##gff-version 3.2.1';\r\n        let data = window.cvit.model.data;\r\n        let gffOpts = this.state.gffOptions;\r\n        let loadIndicator = document.getElementById(\"data-load\");\r\n        loadIndicator.classList.toggle(\"download-loading\");\r\n        for (let group in data) {\r\n            if(data.hasOwnProperty(group) && gffOpts[group]) {\r\n                let dataGroup = data[group];\r\n                if( dataGroup.hasOwnProperty('features')) {\r\n                    dataGroup.features.forEach(feature => {\r\n                        let line = `${feature.seqName}\\t${feature.source}\\t${feature.feature}\\t${feature.start}\\t${feature.end}\\t${feature.score}\\t${feature.strand}\\t${feature.frame}`;\r\n                        let attributes = '';\r\n                        for (let key in feature.attribute) {\r\n                            if (feature.attribute.hasOwnProperty(key)) {\r\n                                attributes += `${key}=${feature.attribute[key]};`\r\n                            }\r\n                        }\r\n                        gff +=`\\n${line}\\t${attributes}`;\r\n                    });\r\n                }\r\n            }\r\n        }\r\n        let url = 'data:text/plain;utf8,' +\r\n            encodeURIComponent(gff);\r\n\t// toggle off loading indicator\r\n        loadIndicator.classList.toggle(\"download-loading\");\r\n\t// open gff in new window\r\n        let win = window.open();\r\n        // noinspection HtmlDeprecatedAttribute\r\n        win.document.write('<iframe src=\"' + url  + '\" frameborder=\"0\" style=\"border:0; top:0; left:0; bottom:0; right:0; width:100%; height:100%;\" allowfullscreen></iframe>');\r\n        win.download('gcvit.gff');\r\n    };\r\n\r\n    onInput = (evt) =>{\r\n        this.setState({name:evt.target.value});\r\n    };\r\n\r\n    onSelect = (evt) => {\r\n        this.setState({format:evt.target.value});\r\n    };\r\n\r\n    onChecked = (evt) => {\r\n        let gffOptions = this.state.gffOptions;\r\n        gffOptions[evt.target.value] = !gffOptions[evt.target.value];\r\n        this.setState( {gffOptions});\r\n    };\r\n\r\n    render(props,state){\r\n        let {name,format,gffOptions} = this.state;\r\n        return(\r\n            <div className={\"modal-area\"}>\r\n                <div className={\"modal-content\"} >\r\n                    <h5> Downloads </h5>\r\n                    <hr />\r\n                    <div className={'modal-contents'}>\r\n                        <div className={'pure-g'}>\r\n                            <div className={'pure-u-1-1 l-box cvit cvit-modal'} id={'export-img-modal'} >\r\n                                <h5> Download Image </h5>\r\n                                <p> Download the current view as an image.</p>\r\n\r\n                                <form style={{width:'100%'}}>\r\n                                    <h6> Image Settings: </h6>\r\n                                    <tbody>\r\n                                    <tr>\r\n                                        <td><span>File Name: </span></td>\r\n                                        <td>\r\n                                            <input\r\n                                                type={'text'}\r\n                                                value={name}\r\n                                                onInput={(evt)=>this.onInput(evt)}\r\n                                                placeholder={'cvit'}\r\n                                            />\r\n                                        </td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td> <span> File Type: </span> </td>\r\n                                        <td>\r\n                                            <label>\r\n                                                <input\r\n                                                    id={'opt-svg'}\r\n                                                    type={'radio'}\r\n                                                    value={'svg'}\r\n                                                    onChange={(evt)=>this.onSelect(evt)}\r\n                                                    checked={format === 'svg'} />\r\n                                                <span> svg </span>\r\n                                            </label>\r\n                                        </td>\r\n                                        <td>\r\n                                            <label>\r\n                                                <input\r\n                                                    id={'opt-png'}\r\n                                                    type={'radio'}\r\n                                                    value={'png'}\r\n                                                    onChange={(evt)=>this.onSelect(evt)}\r\n                                                    checked={format === 'png'}\r\n                                                />\r\n                                                <span> png </span>\r\n                                            </label>\r\n                                        </td>\r\n                                    </tr>\r\n                                    </tbody>\r\n                                </form>\r\n\t\t\t\t<div id=\"img-load\" className={'gcvit-load-text'}> Generating Image: Please Wait </div>\t\r\n\t\t                <button className={'pure-button button-display modal-confirm'}\r\n                                        onClick={()=>this.onClickImage()}\r\n                                > Export Image </button>\r\n                            </div>\r\n                        </div>\r\n                        <div className={'pure-g'}>\r\n                            <hr />\r\n                            <div className={'pure-u-1-1 l-box cvit cvit-modal'} id={'export-data-modal'} >\r\n                                <h5> Download Data </h5>\r\n                                <p> Download data as a gff </p>\r\n\r\n                                <form style={{width:'100%'}}>\r\n                                    <h6> GFF Settings: </h6>\r\n                                    <tbody>\r\n                                    <tr>\r\n                                        <td> <span> Include: </span> </td>\r\n                                        <td>\r\n                                            <label>\r\n                                                <input\r\n                                                    id={'opt-chr'}\r\n                                                    type={'checkbox'}\r\n                                                    value={'chromosome'}\r\n                                                    onChange={(evt)=>this.onChecked(evt)}\r\n                                                    checked={gffOptions.chromosome}\r\n                                                />\r\n                                                <span> chromosome </span>\r\n                                            </label>\r\n                                        </td>\r\n                                        <td>\r\n                                            <label>\r\n                                                <input\r\n                                                    id={'opt-diff'}\r\n                                                    type={'checkbox'}\r\n                                                    value={'diff'}\r\n                                                    onChange={(evt)=>this.onChecked(evt)}\r\n                                                    checked={gffOptions.diff}\r\n                                                />\r\n                                                <span> different </span>\r\n                                            </label>\r\n                                        </td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>  </td>\r\n                                        <td>\r\n                                            <label>\r\n                                                <input\r\n                                                    id={'opt-same'}\r\n                                                    type={'checkbox'}\r\n                                                    value={'same'}\r\n                                                    onChange={(evt)=>this.onChecked(evt)}\r\n                                                    checked={gffOptions.same}\r\n                                                />\r\n                                                <span> same </span>\r\n                                            </label>\r\n                                        </td>\r\n                                        <td>\r\n                                            <label>\r\n                                                <input\r\n                                                    id={'opt-total'}\r\n                                                    type={'checkbox'}\r\n                                                    value={'total'}\r\n                                                    onChange={(evt)=>this.onChecked(evt)}\r\n                                                    checked={gffOptions.total}\r\n                                                />\r\n                                                <span> total </span>\r\n                                            </label>\r\n                                        </td>\r\n                                    </tr>\r\n                                    </tbody>\r\n                                </form>\r\n\t\t\t\t<div id=\"data-load\" className={\"gcvit-load-text\"}> Generating Gff: Please Wait </div>\r\n                                <button className={'pure-button button-display modal-confirm'}\r\n                                        onClick={()=>this.onClickData()}\r\n                                > Download Data </button>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className={'modal-close'}>\r\n                    <button className={'pure-button  button-display modal-confirm'}\r\n                            onClick={()=>this.props.closeAction()}\r\n                    > Close </button>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","/**\r\n * Button to send request for gff to server and \r\n * re-render cvitjs canvas component with results.\r\n */\r\n\r\nimport React from 'react';\r\nimport {binSizeDefault} from \"./DefaultConfiguration\";\r\n\r\n\r\nexport default class DisplayButton extends React.Component {\r\n    state = {\r\n        priorRequest:{\r\n            request:'',\r\n            interval: binSizeDefault,\r\n            response:{},\r\n            refMax: 0,\r\n        },\r\n    };\r\n\r\n    /**\r\n     * craft request for new gff if needed, then re-render cvit canvas with new options\r\n     */\r\n    onSubmit = () => {\r\n\tthis.props.setKey();\r\n        const { selected, options } = this.props;\r\n        const {priorRequest} = this.state;\r\n        let {headers} = this.props\r\n        let requestString = '';\r\n        let classes = {};\r\n        let count = 0;\r\n\t// iterate through selected GTs and build request string\r\n        selected.forEach((query, i) => {\r\n            if (query !== null && query.hasOwnProperty('dataset') && query.hasOwnProperty('genotype')\r\n                && query.dataset != null && query.genotype != null){\r\n                count++;\r\n                requestString =  i === 0 ? requestString+'Ref=' : requestString+'&Variant=';\r\n                requestString = requestString+encodeURIComponent(`${query.dataset.value}:${query.genotype.value}`);\r\n                classes[query.genotype.value] = query.color;\r\n            } else if(i === 0){\r\n                throw new Error('Reference must be selected.')\r\n            }\r\n        });\r\n        classes['undefined'] = 'black';\r\n\r\n        // Configure cvit model for new view\r\n        let cvit = window.cvit;\r\n        let model = cvit.model;\r\n        model._viewConfig.classes = classes;\r\n        const binSize = options.left.hasOwnProperty('bin_size') ? options.left.bin_size :\r\n            options.right.hasOwnProperty('bin_size') ? options.right.bin_size : binSizeDefault;\r\n        requestString = requestString + \"&Bin=\" + encodeURIComponent(binSize);\r\n        this.props.hide();\r\n\r\n        //fetch new data\r\n        if( (priorRequest.request !== requestString) ||\r\n            (binSize !== priorRequest.interval )\r\n        ) {\r\n            document.getElementById('cvit-app').style.visibility = 'visible';\r\n            this.setState({hideOptions:true});\r\n            model._viewData.same = {};\r\n            model._viewData.diff = {};\r\n            model._viewData.total = {};\r\n\r\n            headers.append(\"Content-Type\", \"application/x-www-form-urlencoded\")\r\n            console.log('auth-header', headers)\r\n\r\n            model.appendData('api/generateGFF', {\r\n                method: 'POST',\r\n                headers: headers,\r\n                body: requestString,\r\n            })\r\n                .then(() =>{\r\n                    model._viewLayout.chrOrder = model._setChrOrder(model._viewData);\r\n                    let refMax = 0;\r\n                    let vd = model._viewData;\r\n                    Object.keys(vd.total).forEach(key => {\r\n                        let chr = vd.total[key];\r\n                        if (chr.hasOwnProperty('maxScore') && chr.maxScore.value > refMax) refMax = chr.maxScore.value;\r\n                    });\r\n                    this.setState({priorRequest:{response: model._viewData, request:requestString, interval:binSize, refMax}});\r\n                    this.setView(options, model, count,refMax);\r\n                })\r\n                .catch(e => {\r\n                    console.error('cvit.js: Error requesting data: ', e);\r\n                });\r\n        } else {\r\n            this.setView(options, model,count,priorRequest.refMax);\r\n        }\r\n    };\r\n\r\n    // update cvit canvas\r\n    setView = (options,model,count,refMax) =>{\r\n       if(options.left.bin_max === 0){\r\n           options.left.bin_max = options.left.display === 'heat' ? refMax : refMax*count;\r\n       }\r\n       if(options.right.bin_max === 0){\r\n           options.right.bin_max = options.right.display === 'heat' ? refMax : refMax*count;\r\n       }\r\n       model._viewConfig.left.class_heat = [];\r\n       model._viewConfig.right.class_heat = [];\r\n       model._viewConfig.left.class_filter = [];\r\n       model._viewConfig.right.class_filter = [];\r\n       model._viewConfig = model._combineObjects(model._viewConfig, options);\r\n       model._redraw = true;\r\n       model.setDirty(true);\r\n       model._inform();\r\n    };\r\n\r\n    /**\r\n     * render button component\r\n     */\r\n    render () {\r\n        return(\r\n            <button className={'pure-u-1-4 pure-button-primary button-action pure-button'} onClick={this.onSubmit}> Display </button>\r\n        );\r\n    }\r\n\r\n}\r\n","import React from 'react';\n\n/**\n * Key for displayed datasets.\n */\n\nexport default class key extends React.Component {\n    state = {\n\t    visible : true\n    }\n\n    render () {\n\t    var {visible} = this.state;\n\t    var {datasets} = this.props;\n\t    console.log(datasets);\n\t    var keys = datasets.map((data,i) => {\n\t\tvar keyItem = [];\n\t\tif(data.genotype && data.color) {\n\t\t\tif (i === 0) {\n\t\t\t\tkeyItem.push(<div className={'pure-u-1-4 l-box'} style={{fontWeight:'bold'}}> Reference </div>);\n\t\t\t} else if (i === 1) {\n\t\t\t\tkeyItem.push(<div className={'pure-u-1-4 l-box'} style={{fontWeigth:'bold'}}> Variants </div>);\n\t\t\t} \n\n\t\t\t//keyItem.push(<div className={'pure-u-1-4 l-box'} style={{background:data.color}}> {data.genotype.label} </div>);\n\t\t\tkeyItem.push(<div className={'pure-u-1-4 l-box'}> <div className={'key-color'} style={{background: data.color}}>{`    `}</div> {data.genotype.label} </div>);\n\t\t\t\n\t\t\tif (i === 0) {\n\t\t\t\tkeyItem.push(<div className={'pure-u-1-2 l-box'}> </div>);\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn keyItem;\n\t    } );\n\t    \n        return(\n\t<div>\n   \t  <div className={'pure-u-1-1 l-box fake-button'}>\n            <div className={'pure-g l-box'} onClick={()=>{this.setState({visible : !visible});}}>\n              <div className={'pure-u-1-12 l-box'} > <div className={visible ? 'arrow-down':'arrow-down rotate'}/> </div>\n              <div className={'pure-u-5-6 l-box'}> Key </div>\n              <div className={'pure-u-1-12 l-box'} > <div className={visible ? 'arrow-down':'arrow-down rotate'}/> </div>\n\t    </div>\n\t  </div>\n\t  <div className={'key-box'} style={{display: visible ? \"block\" : \"none\"}}>\n\t    <div className={'pure-g l-box'}>\n\t\t{keys}\n            </div>\n          </div>\n\t</div>\n        );\n    }\n}\n","/**\r\n * @fileoverview Main gcvit ui app.\r\n * TODO: Update from class to hooks\r\n */\r\n\r\nimport React from 'react';\r\nimport ReactModal from 'react-modal';\r\n\r\nimport ReferenceForm from './Components/ReferenceForm';\r\nimport CompareForm from './Components/CompareForm';\r\nimport OptionsForm from './Components/OptionsForm';\r\nimport HelpModal from './Components/HelpModal'\r\nimport DataModal from \"./Components/DownloadModal\";\r\nimport DisplayButton from \"./Components/DisplayButton\";\r\nimport {rulerIntervalDefault, titleDefault} from \"./Components/DefaultConfiguration\";\r\nimport Key from \"./Components/Key\"\r\n\r\nexport default class App extends React.Component {\r\n    state = {\r\n        datasets:[], //Datasets available from service\r\n        genotypes: {}, //All genotypes available in selected dataset\r\n        referenceDataset: null, //Dataset reference was chosen from\r\n        selected:[], //All selected datasets+genotypes for comparison\r\n\tcurrentKey:[], //Deep copy of selected after submitting a comparison\r\n        options: { //General configuration for selected data options\r\n            left:{\r\n                feature : 'none',\r\n                offset : -0,\r\n                draw_label : 0,\r\n            },\r\n            right:{\r\n                feature : 'none',\r\n                offset : 0,\r\n                draw_label : 0,\r\n            },\r\n            general:{\r\n                title: titleDefault,\r\n                display_ruler: 'L',\r\n                tick_interval: rulerIntervalDefault,\r\n            },\r\n        },\r\n        hideOptions: false, //show/hide the gcvit configuration UI\r\n        showModal: '', //show/hide overlay modals (dl/help)\r\n        auth: process.env.REACT_APP_USE_AUTH, //is react using authentication?\r\n        user: '', // passed username\r\n        pwd: '', // passed password\r\n        authHeader: new Headers(), //basicAuth header\r\n    };\r\n\r\n    /**\r\n     * GET request to API to fetch the available datasets to populate options\r\n     * @param {header} header\r\n     **/\r\n    loadDatasets = (header = this.state.authHeader) => {\r\n        fetch('api/experiment',{method:\"GET\", headers: header})\r\n            .then( response => response.json())\r\n            .then( datasets => {\r\n                this.setState({datasets});\r\n            })\r\n    };\r\n\r\n    /**\r\n     * Append a new comparison set to the display array\r\n     * @param {number} idx  index to add value to array\r\n     * @param {Object} value color+dataset+genotype object to append\r\n     */\r\n    appendDataset = (idx,value) => {\r\n        let selected = this.state.selected.slice();\r\n        selected[idx]=value;\r\n        this.setState({selected});\r\n    };\r\n\r\n    /**\r\n     * GET request to populate the genotype array\r\n     * @param {Object} referenceDataset dataset to draw genotypes from\r\n     */\r\n\r\n    setDataset = (referenceDataset) => {\r\n        let val = referenceDataset.value;\r\n        if( !this.state.genotypes[val]){\r\n            fetch(`api/experiment/${val}`,{method:\"GET\", headers: this.state.authHeader})\r\n                .then(result => result.json())\r\n                .then( genotype => {\r\n                    let genotypes = JSON.parse(JSON.stringify(this.state.genotypes));\r\n                    genotypes[val] = genotype;\r\n                    this.setState({referenceDataset, genotypes, selected:[]})\r\n                })\r\n        } else {\r\n            this.setState({referenceDataset,selected:[]})\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Edit display options\r\n     * @param {object} options display options\r\n     */\r\n    setOptions = (options) => {\r\n        this.setState(options);\r\n    };\r\n\r\n    /**\r\n     * Hide help/download modal at close\r\n     */\r\n    handleCloseModal = () => this.setState({ showModal: '' });\r\n\r\n    /**\r\n     * Display help/download modal at open\r\n     * @param {boolean} showModal\r\n     */\r\n    handleOpenModal = (showModal) => this.setState({showModal});\r\n\r\n    /**\r\n     * Username update\r\n     * @param e form event\r\n     */\r\n    userChange = (e) => {\r\n        const user = e.target.value;\r\n        this.setState({user});\r\n    };\r\n  \r\n    /**\r\n     * Update password from form\r\n     * @param e form event\r\n     */\r\n    passwordChange = (e) => {\r\n        const pwd = e.target.value;\r\n        this.setState({pwd});\r\n    };\r\n    /**\r\n     * Test curret credentials against server\r\n     */\r\n    checkAuthState = () => {\r\n        const authString = btoa(this.state.user+':'+this.state.pwd);\r\n        let authHeader = new Headers();\r\n        authHeader.append('Authorization', 'Basic '+ authString);\r\n        fetch('/login', {method:'GET', headers:authHeader})\r\n            .then (response => {\r\n                if( response.status === 202 ) {\r\n                    this.setState({authHeader});\r\n                    this.loadDatasets()\r\n                } else {\r\n                    window.alert(\"Invalid credentials.\")\r\n                }\r\n            })\r\n    };\r\n\r\n    /**\r\n     * Reset auth state to none\r\n     */\r\n    logout = () => {\r\n        const authHeader = new Headers();\r\n        const pwd = \"\";\r\n        const user = \"\";\r\n        let datasets = [];\r\n        this.setState({authHeader, user, pwd, datasets});\r\n        this.loadDatasets(authHeader);\r\n    };\r\n\r\n    setKey = () => {\r\n\tthis.setState({currentKey:JSON.parse(JSON.stringify(this.state.selected))});\r\n    }\r\n\r\n    /**\r\n     * After UI mounts, hide cvit-app until first comparison request is made, and populate\r\n     * list of available datasets\r\n     */\r\n    componentDidMount() {\r\n        document.getElementById('cvit-app').style.visibility = 'hidden';\r\n        this.loadDatasets()\r\n    };\r\n\r\n    /**\r\n     * Render app components\r\n     */\r\n    render() {\r\n        const { selected, currentKey, options, hideOptions, showModal, auth, user, authHeader } = this.state;\r\n        let gts = this.state.referenceDataset !== null && this.state.genotypes[this.state.referenceDataset.value] !== undefined\r\n            ? this.state.genotypes[this.state.referenceDataset.value]\r\n            : [];\r\n\r\n        return (\r\n            <div className={'selector-container'}>\r\n                <ReactModal\r\n                    isOpen={showModal === 'data'}\r\n                    onRequestClose={this.handleCloseModal}\r\n                    shouldCloseOnOverlayClick={true}\r\n                >\r\n                    <DataModal closeAction={()=>this.handleOpenModal()} />\r\n                </ReactModal>\r\n                <ReactModal\r\n                    isOpen={showModal === 'help'}\r\n                    onRequestClose={this.handleCloseModal}\r\n                    shouldCloseOnOverlayClick={true}\r\n                >\r\n                        <HelpModal closeAction={()=>this.handleOpenModal()} />\r\n                </ReactModal>\r\n\r\n                <div\r\n                    className={'pure-u-1-1 l-box fake-button'}\r\n                    onClick={()=>{this.setState({hideOptions:!hideOptions})}}\r\n                >\r\n                    <div className={'pure-g'}>\r\n                        <div className={'pure-u-1-12 l-box'} > <div className={hideOptions ? 'arrow-down rotate':'arrow-down'}/> </div>\r\n                        <div className={'pure-u-5-6 l-box'}> Configure View </div>\r\n                        <div className={'pure-u-1-12 l-box'} > <div className={hideOptions ? 'arrow-down rotate':'arrow-down'}/> </div>\r\n                    </div>\r\n                </div>\r\n                <form className={'display-options'} style={{maxHeight: hideOptions ? '0px' : '100%', overflow: hideOptions ? 'hidden' : 'visible'}}>\r\n                    { auth === \"TRUE\" ?\r\n                       !authHeader.has(\"Authorization\") ?\r\n                            <fieldset className={'genotype-field'}>\r\n                                <legend> Login </legend>\r\n                                <div className={'pure-g genotype-select'}>\r\n                                    <div className={'pure-u-5-12 l-box '}>\r\n                                        <input type={'text'} className={'pure-u-1-1 l-box git-option'} placeholder={'username'} onInput={e=>this.userChange(e)} />\r\n                                    </div>\r\n                                    <div className={'pure-u-5-12 l-box'}>\r\n                                        <input type={'password'} className={'pure-u-1-1 l-box git-option'} placeholder={'password'} onInput={e=>this.passwordChange(e)} />\r\n                                    </div>\r\n                                    <div className={'pure-u-2-12 l-box'}>\r\n                                        <div className={'fake-button git-option'} onClick={()=> this.checkAuthState()} > Login </div>\r\n                                    </div>\r\n                                </div>\r\n                            </fieldset>\r\n                            :\r\n                            <fieldset className={'genotype-field'}>\r\n                                <legend> Login </legend>\r\n                                <div className={'pure-g genotype-select'}>\r\n                                    <div className={'pure-u-10-12 l-box '}>\r\n                                        <div className={'pure-u-1-1 l-box'} style={{\"width\":\"100%\"}}> {`Logged in as ${user}`} </div>\r\n                                    </div>\r\n                                    <div className={'pure-u-2-12 l-box'}>\r\n                                        <div className={'fake-button git-option'} onClick={()=> this.logout()} > Logout </div>\r\n                                    </div>\r\n                                </div>\r\n                            </fieldset>\r\n                        :\r\n                        null\r\n                    }\r\n                    <ReferenceForm datasets={this.state.datasets} setDataset={this.setDataset} appendDataset={this.appendDataset} genotypes={gts} />\r\n                    { selected.length > 0 && selected[0].genotype !== null\r\n                        ? <CompareForm selected={this.state.referenceDataset} genotypes={gts} appendDataset={this.appendDataset} />\r\n                        : null\r\n                    }\r\n                    <OptionsForm setOptions ={this.setOptions} genotypes={selected} options={options}/>\r\n                </form>\r\n                <div className={'pure-g'}>\r\n                    <DisplayButton selected={selected} options={options} headers={authHeader} hide={()=>{this.setState({hideOptions:true});}} setKey={this.setKey}/>\r\n                    <div className={'pure-u-5-24 '}><br /></div>\r\n                    <button className={'pure-u-1-4  pure-button button-display'} onClick={()=>this.handleOpenModal('data')}> Download </button>\r\n                    <div className={'pure-u-1-24'} />\r\n                    <button className={'pure-u-1-4  pure-button button-display'} onClick={()=>this.handleOpenModal('help')}> Help </button>\r\n                </div>\r\n\t\t<Key datasets={currentKey} />\r\n            </div>\r\n        );\r\n    };\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'purecss/build/grids.css';\r\nimport 'purecss/build/buttons.css';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\n// Initial entry point, bind gcvit ui to 'selector-app' div\r\nReactDOM.render(<App />, document.getElementById('selector-app'));\r\n\r\n"],"sourceRoot":""}